// source: status.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.DeviceStatus', null, global);
goog.exportSymbol('proto.FactoryStatus', null, global);
goog.exportSymbol('proto.FoupStatus', null, global);
goog.exportSymbol('proto.GraphPos', null, global);
goog.exportSymbol('proto.Ids', null, global);
goog.exportSymbol('proto.RobotStatus', null, global);
goog.exportSymbol('proto.RobotWorkState', null, global);
goog.exportSymbol('proto.TaskState', null, global);
goog.exportSymbol('proto.TaskStatus', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Ids = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Ids.repeatedFields_, null);
};
goog.inherits(proto.Ids, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Ids.displayName = 'proto.Ids';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GraphPos = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GraphPos, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GraphPos.displayName = 'proto.GraphPos';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RobotStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RobotStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RobotStatus.displayName = 'proto.RobotStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeviceStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeviceStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DeviceStatus.displayName = 'proto.DeviceStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FoupStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FoupStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FoupStatus.displayName = 'proto.FoupStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TaskStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TaskStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TaskStatus.displayName = 'proto.TaskStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FactoryStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.FactoryStatus.repeatedFields_, null);
};
goog.inherits(proto.FactoryStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FactoryStatus.displayName = 'proto.FactoryStatus';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Ids.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Ids.prototype.toObject = function(opt_includeInstance) {
  return proto.Ids.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Ids} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Ids.toObject = function(includeInstance, msg) {
  var f, obj = {
    idsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Ids}
 */
proto.Ids.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Ids;
  return proto.Ids.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Ids} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Ids}
 */
proto.Ids.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addIds(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Ids.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Ids.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Ids} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Ids.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
};


/**
 * repeated int32 ids = 1;
 * @return {!Array<number>}
 */
proto.Ids.prototype.getIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Ids} returns this
 */
proto.Ids.prototype.setIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Ids} returns this
 */
proto.Ids.prototype.addIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Ids} returns this
 */
proto.Ids.prototype.clearIdsList = function() {
  return this.setIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GraphPos.prototype.toObject = function(opt_includeInstance) {
  return proto.GraphPos.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GraphPos} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GraphPos.toObject = function(includeInstance, msg) {
  var f, obj = {
    edgeId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    percent: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GraphPos}
 */
proto.GraphPos.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GraphPos;
  return proto.GraphPos.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GraphPos} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GraphPos}
 */
proto.GraphPos.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEdgeId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPercent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GraphPos.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GraphPos.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GraphPos} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GraphPos.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEdgeId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPercent();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional int32 edge_id = 1;
 * @return {number}
 */
proto.GraphPos.prototype.getEdgeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.GraphPos} returns this
 */
proto.GraphPos.prototype.setEdgeId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional float percent = 2;
 * @return {number}
 */
proto.GraphPos.prototype.getPercent = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.GraphPos} returns this
 */
proto.GraphPos.prototype.setPercent = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RobotStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.RobotStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RobotStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RobotStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pos: (f = msg.getPos()) && proto.GraphPos.toObject(includeInstance, f),
    speed: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    predictPos: (f = msg.getPredictPos()) && proto.GraphPos.toObject(includeInstance, f),
    pathEdges: (f = msg.getPathEdges()) && proto.Ids.toObject(includeInstance, f),
    state: jspb.Message.getFieldWithDefault(msg, 6, 0),
    foupId: jspb.Message.getFieldWithDefault(msg, 7, 0),
    taskId: jspb.Message.getFieldWithDefault(msg, 8, 0),
    loadingRtime: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    loadingTtime: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RobotStatus}
 */
proto.RobotStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RobotStatus;
  return proto.RobotStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RobotStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RobotStatus}
 */
proto.RobotStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.GraphPos;
      reader.readMessage(value,proto.GraphPos.deserializeBinaryFromReader);
      msg.setPos(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpeed(value);
      break;
    case 4:
      var value = new proto.GraphPos;
      reader.readMessage(value,proto.GraphPos.deserializeBinaryFromReader);
      msg.setPredictPos(value);
      break;
    case 5:
      var value = new proto.Ids;
      reader.readMessage(value,proto.Ids.deserializeBinaryFromReader);
      msg.setPathEdges(value);
      break;
    case 6:
      var value = /** @type {!proto.RobotWorkState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFoupId(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTaskId(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLoadingRtime(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLoadingTtime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RobotStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RobotStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RobotStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RobotStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPos();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.GraphPos.serializeBinaryToWriter
    );
  }
  f = message.getSpeed();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getPredictPos();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.GraphPos.serializeBinaryToWriter
    );
  }
  f = message.getPathEdges();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Ids.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.RobotWorkState} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeFloat(
      10,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.RobotStatus.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.RobotStatus} returns this
 */
proto.RobotStatus.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional GraphPos pos = 2;
 * @return {?proto.GraphPos}
 */
proto.RobotStatus.prototype.getPos = function() {
  return /** @type{?proto.GraphPos} */ (
    jspb.Message.getWrapperField(this, proto.GraphPos, 2));
};


/**
 * @param {?proto.GraphPos|undefined} value
 * @return {!proto.RobotStatus} returns this
*/
proto.RobotStatus.prototype.setPos = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RobotStatus} returns this
 */
proto.RobotStatus.prototype.clearPos = function() {
  return this.setPos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RobotStatus.prototype.hasPos = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float speed = 3;
 * @return {number}
 */
proto.RobotStatus.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RobotStatus} returns this
 */
proto.RobotStatus.prototype.setSpeed = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional GraphPos predict_pos = 4;
 * @return {?proto.GraphPos}
 */
proto.RobotStatus.prototype.getPredictPos = function() {
  return /** @type{?proto.GraphPos} */ (
    jspb.Message.getWrapperField(this, proto.GraphPos, 4));
};


/**
 * @param {?proto.GraphPos|undefined} value
 * @return {!proto.RobotStatus} returns this
*/
proto.RobotStatus.prototype.setPredictPos = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RobotStatus} returns this
 */
proto.RobotStatus.prototype.clearPredictPos = function() {
  return this.setPredictPos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RobotStatus.prototype.hasPredictPos = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Ids path_edges = 5;
 * @return {?proto.Ids}
 */
proto.RobotStatus.prototype.getPathEdges = function() {
  return /** @type{?proto.Ids} */ (
    jspb.Message.getWrapperField(this, proto.Ids, 5));
};


/**
 * @param {?proto.Ids|undefined} value
 * @return {!proto.RobotStatus} returns this
*/
proto.RobotStatus.prototype.setPathEdges = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RobotStatus} returns this
 */
proto.RobotStatus.prototype.clearPathEdges = function() {
  return this.setPathEdges(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RobotStatus.prototype.hasPathEdges = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional RobotWorkState state = 6;
 * @return {!proto.RobotWorkState}
 */
proto.RobotStatus.prototype.getState = function() {
  return /** @type {!proto.RobotWorkState} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.RobotWorkState} value
 * @return {!proto.RobotStatus} returns this
 */
proto.RobotStatus.prototype.setState = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.RobotStatus} returns this
 */
proto.RobotStatus.prototype.clearState = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RobotStatus.prototype.hasState = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 foup_id = 7;
 * @return {number}
 */
proto.RobotStatus.prototype.getFoupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.RobotStatus} returns this
 */
proto.RobotStatus.prototype.setFoupId = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.RobotStatus} returns this
 */
proto.RobotStatus.prototype.clearFoupId = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RobotStatus.prototype.hasFoupId = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int32 task_id = 8;
 * @return {number}
 */
proto.RobotStatus.prototype.getTaskId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.RobotStatus} returns this
 */
proto.RobotStatus.prototype.setTaskId = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.RobotStatus} returns this
 */
proto.RobotStatus.prototype.clearTaskId = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RobotStatus.prototype.hasTaskId = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional float loading_rtime = 9;
 * @return {number}
 */
proto.RobotStatus.prototype.getLoadingRtime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RobotStatus} returns this
 */
proto.RobotStatus.prototype.setLoadingRtime = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.RobotStatus} returns this
 */
proto.RobotStatus.prototype.clearLoadingRtime = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RobotStatus.prototype.hasLoadingRtime = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional float loading_ttime = 10;
 * @return {number}
 */
proto.RobotStatus.prototype.getLoadingTtime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RobotStatus} returns this
 */
proto.RobotStatus.prototype.setLoadingTtime = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.RobotStatus} returns this
 */
proto.RobotStatus.prototype.clearLoadingTtime = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RobotStatus.prototype.hasLoadingTtime = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeviceStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.DeviceStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeviceStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeviceStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    foupCache: (f = msg.getFoupCache()) && proto.Ids.toObject(includeInstance, f),
    foupId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    cycleRtime: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeviceStatus}
 */
proto.DeviceStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeviceStatus;
  return proto.DeviceStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeviceStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeviceStatus}
 */
proto.DeviceStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.Ids;
      reader.readMessage(value,proto.Ids.deserializeBinaryFromReader);
      msg.setFoupCache(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFoupId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCycleRtime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeviceStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeviceStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeviceStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeviceStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getFoupCache();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Ids.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.DeviceStatus.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeviceStatus} returns this
 */
proto.DeviceStatus.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Ids foup_cache = 2;
 * @return {?proto.Ids}
 */
proto.DeviceStatus.prototype.getFoupCache = function() {
  return /** @type{?proto.Ids} */ (
    jspb.Message.getWrapperField(this, proto.Ids, 2));
};


/**
 * @param {?proto.Ids|undefined} value
 * @return {!proto.DeviceStatus} returns this
*/
proto.DeviceStatus.prototype.setFoupCache = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DeviceStatus} returns this
 */
proto.DeviceStatus.prototype.clearFoupCache = function() {
  return this.setFoupCache(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DeviceStatus.prototype.hasFoupCache = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 foup_id = 3;
 * @return {number}
 */
proto.DeviceStatus.prototype.getFoupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeviceStatus} returns this
 */
proto.DeviceStatus.prototype.setFoupId = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.DeviceStatus} returns this
 */
proto.DeviceStatus.prototype.clearFoupId = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DeviceStatus.prototype.hasFoupId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float cycle_rtime = 4;
 * @return {number}
 */
proto.DeviceStatus.prototype.getCycleRtime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.DeviceStatus} returns this
 */
proto.DeviceStatus.prototype.setCycleRtime = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.DeviceStatus} returns this
 */
proto.DeviceStatus.prototype.clearCycleRtime = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DeviceStatus.prototype.hasCycleRtime = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FoupStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.FoupStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FoupStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FoupStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0),
    processed: jspb.Message.getFieldWithDefault(msg, 3, 0),
    lineId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    stage: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FoupStatus}
 */
proto.FoupStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FoupStatus;
  return proto.FoupStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FoupStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FoupStatus}
 */
proto.FoupStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProcessed(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLineId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FoupStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FoupStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FoupStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FoupStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.FoupStatus.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.FoupStatus} returns this
 */
proto.FoupStatus.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 count = 2;
 * @return {number}
 */
proto.FoupStatus.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.FoupStatus} returns this
 */
proto.FoupStatus.prototype.setCount = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.FoupStatus} returns this
 */
proto.FoupStatus.prototype.clearCount = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FoupStatus.prototype.hasCount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 processed = 3;
 * @return {number}
 */
proto.FoupStatus.prototype.getProcessed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.FoupStatus} returns this
 */
proto.FoupStatus.prototype.setProcessed = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.FoupStatus} returns this
 */
proto.FoupStatus.prototype.clearProcessed = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FoupStatus.prototype.hasProcessed = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 line_id = 4;
 * @return {number}
 */
proto.FoupStatus.prototype.getLineId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.FoupStatus} returns this
 */
proto.FoupStatus.prototype.setLineId = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.FoupStatus} returns this
 */
proto.FoupStatus.prototype.clearLineId = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FoupStatus.prototype.hasLineId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 stage = 5;
 * @return {number}
 */
proto.FoupStatus.prototype.getStage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.FoupStatus} returns this
 */
proto.FoupStatus.prototype.setStage = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.FoupStatus} returns this
 */
proto.FoupStatus.prototype.clearStage = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FoupStatus.prototype.hasStage = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TaskStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.TaskStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TaskStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TaskStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pickupDevice: jspb.Message.getFieldWithDefault(msg, 3, 0),
    placeDevice: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TaskStatus}
 */
proto.TaskStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TaskStatus;
  return proto.TaskStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TaskStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TaskStatus}
 */
proto.TaskStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.TaskState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPickupDevice(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlaceDevice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TaskStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TaskStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TaskStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TaskStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {!proto.TaskState} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.TaskStatus.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.TaskStatus} returns this
 */
proto.TaskStatus.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional TaskState state = 2;
 * @return {!proto.TaskState}
 */
proto.TaskStatus.prototype.getState = function() {
  return /** @type {!proto.TaskState} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.TaskState} value
 * @return {!proto.TaskStatus} returns this
 */
proto.TaskStatus.prototype.setState = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TaskStatus} returns this
 */
proto.TaskStatus.prototype.clearState = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TaskStatus.prototype.hasState = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 pickup_device = 3;
 * @return {number}
 */
proto.TaskStatus.prototype.getPickupDevice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.TaskStatus} returns this
 */
proto.TaskStatus.prototype.setPickupDevice = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TaskStatus} returns this
 */
proto.TaskStatus.prototype.clearPickupDevice = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TaskStatus.prototype.hasPickupDevice = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 place_device = 4;
 * @return {number}
 */
proto.TaskStatus.prototype.getPlaceDevice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.TaskStatus} returns this
 */
proto.TaskStatus.prototype.setPlaceDevice = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TaskStatus} returns this
 */
proto.TaskStatus.prototype.clearPlaceDevice = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TaskStatus.prototype.hasPlaceDevice = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.FactoryStatus.repeatedFields_ = [2,3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FactoryStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.FactoryStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FactoryStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FactoryStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    robotsList: jspb.Message.toObjectList(msg.getRobotsList(),
    proto.RobotStatus.toObject, includeInstance),
    devicesList: jspb.Message.toObjectList(msg.getDevicesList(),
    proto.DeviceStatus.toObject, includeInstance),
    foupsList: jspb.Message.toObjectList(msg.getFoupsList(),
    proto.FoupStatus.toObject, includeInstance),
    tasksList: jspb.Message.toObjectList(msg.getTasksList(),
    proto.TaskStatus.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FactoryStatus}
 */
proto.FactoryStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FactoryStatus;
  return proto.FactoryStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FactoryStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FactoryStatus}
 */
proto.FactoryStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTime(value);
      break;
    case 2:
      var value = new proto.RobotStatus;
      reader.readMessage(value,proto.RobotStatus.deserializeBinaryFromReader);
      msg.addRobots(value);
      break;
    case 3:
      var value = new proto.DeviceStatus;
      reader.readMessage(value,proto.DeviceStatus.deserializeBinaryFromReader);
      msg.addDevices(value);
      break;
    case 4:
      var value = new proto.FoupStatus;
      reader.readMessage(value,proto.FoupStatus.deserializeBinaryFromReader);
      msg.addFoups(value);
      break;
    case 5:
      var value = new proto.TaskStatus;
      reader.readMessage(value,proto.TaskStatus.deserializeBinaryFromReader);
      msg.addTasks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FactoryStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FactoryStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FactoryStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FactoryStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getRobotsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.RobotStatus.serializeBinaryToWriter
    );
  }
  f = message.getDevicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.DeviceStatus.serializeBinaryToWriter
    );
  }
  f = message.getFoupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.FoupStatus.serializeBinaryToWriter
    );
  }
  f = message.getTasksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.TaskStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional float time = 1;
 * @return {number}
 */
proto.FactoryStatus.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FactoryStatus} returns this
 */
proto.FactoryStatus.prototype.setTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * repeated RobotStatus robots = 2;
 * @return {!Array<!proto.RobotStatus>}
 */
proto.FactoryStatus.prototype.getRobotsList = function() {
  return /** @type{!Array<!proto.RobotStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.RobotStatus, 2));
};


/**
 * @param {!Array<!proto.RobotStatus>} value
 * @return {!proto.FactoryStatus} returns this
*/
proto.FactoryStatus.prototype.setRobotsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.RobotStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.RobotStatus}
 */
proto.FactoryStatus.prototype.addRobots = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.RobotStatus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.FactoryStatus} returns this
 */
proto.FactoryStatus.prototype.clearRobotsList = function() {
  return this.setRobotsList([]);
};


/**
 * repeated DeviceStatus devices = 3;
 * @return {!Array<!proto.DeviceStatus>}
 */
proto.FactoryStatus.prototype.getDevicesList = function() {
  return /** @type{!Array<!proto.DeviceStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.DeviceStatus, 3));
};


/**
 * @param {!Array<!proto.DeviceStatus>} value
 * @return {!proto.FactoryStatus} returns this
*/
proto.FactoryStatus.prototype.setDevicesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.DeviceStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.DeviceStatus}
 */
proto.FactoryStatus.prototype.addDevices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.DeviceStatus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.FactoryStatus} returns this
 */
proto.FactoryStatus.prototype.clearDevicesList = function() {
  return this.setDevicesList([]);
};


/**
 * repeated FoupStatus foups = 4;
 * @return {!Array<!proto.FoupStatus>}
 */
proto.FactoryStatus.prototype.getFoupsList = function() {
  return /** @type{!Array<!proto.FoupStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.FoupStatus, 4));
};


/**
 * @param {!Array<!proto.FoupStatus>} value
 * @return {!proto.FactoryStatus} returns this
*/
proto.FactoryStatus.prototype.setFoupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.FoupStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.FoupStatus}
 */
proto.FactoryStatus.prototype.addFoups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.FoupStatus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.FactoryStatus} returns this
 */
proto.FactoryStatus.prototype.clearFoupsList = function() {
  return this.setFoupsList([]);
};


/**
 * repeated TaskStatus tasks = 5;
 * @return {!Array<!proto.TaskStatus>}
 */
proto.FactoryStatus.prototype.getTasksList = function() {
  return /** @type{!Array<!proto.TaskStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TaskStatus, 5));
};


/**
 * @param {!Array<!proto.TaskStatus>} value
 * @return {!proto.FactoryStatus} returns this
*/
proto.FactoryStatus.prototype.setTasksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.TaskStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TaskStatus}
 */
proto.FactoryStatus.prototype.addTasks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.TaskStatus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.FactoryStatus} returns this
 */
proto.FactoryStatus.prototype.clearTasksList = function() {
  return this.setTasksList([]);
};


/**
 * @enum {number}
 */
proto.RobotWorkState = {
  IDLE: 0,
  TASKASSIGNED: 1,
  WAITPICK: 2,
  FOUPPICKED: 3,
  WAITPLACE: 4
};

/**
 * @enum {number}
 */
proto.TaskState = {
  NOTASSIGNED: 0,
  ASSIGNED: 1,
  ACCEPTED: 2,
  FINISHED: 3
};

goog.object.extend(exports, proto);
